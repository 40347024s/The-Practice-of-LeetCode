=====================================================================================
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.
-------------------------------------------------------------------------------------
Example1:
Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
-------------------------------------------------------------------------------------
Example 2:
Input: s1 = "ab", s2 = "eidboaoo"
Output: false
-------------------------------------------------------------------------------------
Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters.
=====================================================================================


Basic Idea :

The alphabets in a permutation that is to be searched will always be the same, 
and so will their count.
The thing that counts in s2 is that each substring has the same number of characters as in s1. As a result, 
we make a hashmap that contains the count of each character in the string s1. 
After that, we slide a window over the string s2 and lower the number for characters that appear in the window. 
When all of the counters in the hashmap reach 0, we've found the permutation.